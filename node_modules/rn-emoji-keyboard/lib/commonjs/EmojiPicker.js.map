{"version":3,"sources":["EmojiPicker.tsx"],"names":["EmojiPicker","onEmojiSelected","onRequestClose","open","onClose","expandable","defaultKeyboardContext","defaultHeight","props","height","screenHeight","offsetY","React","useRef","Animated","Value","current","additionalHeight","keyboardVisible","keyboardHeight","isExpanded","setIsExpanded","useState","useEffect","shouldExpandHeight","newAdditionalHeightValue","timing","toValue","useNativeDriver","duration","start","close","setValue","emoji","add","subtract"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAGA;;AACA;;AACA;;;;;;;;AAEO,MAAMA,WAAW,GAAG,CAAC;AAC1BC,EAAAA,eAD0B;AAE1BC,EAAAA,cAF0B;AAG1BC,EAAAA,IAH0B;AAI1BC,EAAAA,OAJ0B;AAK1BC,EAAAA,UAAU,GAAGC,yCAAuBD,UALV;AAM1BE,EAAAA,aAAa,GAAGD,yCAAuBC,aANb;AAO1B,KAAGC;AAPuB,CAAD,KAQN;AACnB,QAAM;AAAEC,IAAAA,MAAM,EAAEC;AAAV,MAA2B,uCAAjC;AACA,QAAMC,OAAO,GAAGC,KAAK,CAACC,MAAN,CAAa,IAAIC,sBAASC,KAAb,CAAmB,CAAnB,CAAb,EAAoCC,OAApD;AACA,QAAMP,MAAM,GAAGG,KAAK,CAACC,MAAN,CAAa,IAAIC,sBAASC,KAAb,CAAmB,sBAAUR,aAAV,EAAyBG,YAAzB,CAAnB,CAAb,EAAyEM,OAAxF;AACA,QAAMC,gBAAgB,GAAGL,KAAK,CAACC,MAAN,CAAa,IAAIC,sBAASC,KAAb,CAAmB,CAAnB,CAAb,EAAoCC,OAA7D;AACA,QAAM;AAAEE,IAAAA,eAAF;AAAmBC,IAAAA;AAAnB,MAAsC,+BAA5C;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BT,KAAK,CAACU,QAAN,CAAe,KAAf,CAApC;AAEAV,EAAAA,KAAK,CAACW,SAAN,CAAgB,MAAM;AACpB,UAAMC,kBAAkB,GAAGN,eAAe,IAAI,CAACE,UAA/C;AACA,UAAMK,wBAAwB,GAAGD,kBAAkB,GAAGL,cAAH,GAAoB,CAAvE;;AACAL,0BAASY,MAAT,CAAgBT,gBAAhB,EAAkC;AAChCU,MAAAA,OAAO,EAAEF,wBADuB;AAEhCG,MAAAA,eAAe,EAAE,KAFe;AAGhCC,MAAAA,QAAQ,EAAE;AAHsB,KAAlC,EAIGC,KAJH;AAKD,GARD,EAQG,CAACb,gBAAD,EAAmBG,UAAnB,EAA+BD,cAA/B,EAA+CD,eAA/C,CARH;;AAUA,QAAMa,KAAK,GAAG,MAAM;AAClBtB,IAAAA,MAAM,CAACuB,QAAP,CAAgB,sBAAUzB,aAAV,EAAyBG,YAAzB,CAAhB;AACAC,IAAAA,OAAO,CAACqB,QAAR,CAAiB,CAAjB;AACA5B,IAAAA,OAAO;AACR,GAJD;;AAMA,sBACE,oBAAC,kCAAD;AACE,IAAA,eAAe,EAAG6B,KAAD,IAAsB;AACrChC,MAAAA,eAAe,CAACgC,KAAD,CAAf;AACAF,MAAAA,KAAK;AACN,KAJH;AAKE,IAAA,IAAI,EAAE5B,IALR;AAME,IAAA,OAAO,EAAE4B,KANX;AAOE,IAAA,UAAU,EAAE1B,UAPd;AAQE,IAAA,aAAa,EAAEE;AARjB,KASMC,KATN,gBAUE,oBAAC,oCAAD;AAAmB,IAAA,MAAM,EAAEL,IAA3B;AAAiC,IAAA,aAAa,EAAE4B,KAAhD;AAAuD,IAAA,cAAc,EAAE7B;AAAvE,kBACE,0CACGG,UAAU,iBACT,oBAAC,UAAD;AACE,IAAA,MAAM,EAAEI,MADV;AAEE,IAAA,OAAO,EAAEE,OAFX;AAGE,IAAA,OAAO,EAAEP,OAHX;AAIE,IAAA,aAAa,EAAEiB;AAJjB,IAFJ,eASE,oBAAC,qBAAD,CAAU,IAAV;AACE,IAAA,KAAK,EAAE,CACL;AACEZ,MAAAA,MAAM,EAAEK,sBAASoB,GAAT,CAAapB,sBAASqB,QAAT,CAAkB1B,MAAlB,EAA0BE,OAA1B,CAAb,EAAiDM,gBAAjD;AADV,KADK;AADT,kBAME,oBAAC,wCAAD,OANF,CATF,CADF,CAVF,CADF;AAiCD,CAjEM","sourcesContent":["import * as React from 'react'\nimport { Animated, useWindowDimensions } from 'react-native'\nimport { EmojiStaticKeyboard } from './components/EmojiStaticKeyboard'\nimport { Knob } from './components/Knob'\nimport { defaultKeyboardContext, KeyboardProvider } from './contexts/KeyboardProvider'\nimport type { KeyboardProps } from './contexts/KeyboardContext'\nimport type { EmojiType } from './types'\nimport { ModalWithBackdrop } from './components/ModalWithBackdrop'\nimport { getHeight } from './utils'\nimport { useKeyboard } from './hooks/useKeyboard'\n\nexport const EmojiPicker = ({\n  onEmojiSelected,\n  onRequestClose,\n  open,\n  onClose,\n  expandable = defaultKeyboardContext.expandable,\n  defaultHeight = defaultKeyboardContext.defaultHeight,\n  ...props\n}: KeyboardProps) => {\n  const { height: screenHeight } = useWindowDimensions()\n  const offsetY = React.useRef(new Animated.Value(0)).current\n  const height = React.useRef(new Animated.Value(getHeight(defaultHeight, screenHeight))).current\n  const additionalHeight = React.useRef(new Animated.Value(0)).current\n  const { keyboardVisible, keyboardHeight } = useKeyboard()\n  const [isExpanded, setIsExpanded] = React.useState(false)\n\n  React.useEffect(() => {\n    const shouldExpandHeight = keyboardVisible && !isExpanded\n    const newAdditionalHeightValue = shouldExpandHeight ? keyboardHeight : 0\n    Animated.timing(additionalHeight, {\n      toValue: newAdditionalHeightValue,\n      useNativeDriver: false,\n      duration: 200,\n    }).start()\n  }, [additionalHeight, isExpanded, keyboardHeight, keyboardVisible])\n\n  const close = () => {\n    height.setValue(getHeight(defaultHeight, screenHeight))\n    offsetY.setValue(0)\n    onClose()\n  }\n\n  return (\n    <KeyboardProvider\n      onEmojiSelected={(emoji: EmojiType) => {\n        onEmojiSelected(emoji)\n        close()\n      }}\n      open={open}\n      onClose={close}\n      expandable={expandable}\n      defaultHeight={defaultHeight}\n      {...props}>\n      <ModalWithBackdrop isOpen={open} backdropPress={close} onRequestClose={onRequestClose}>\n        <>\n          {expandable && (\n            <Knob\n              height={height}\n              offsetY={offsetY}\n              onClose={onClose}\n              setIsExpanded={setIsExpanded}\n            />\n          )}\n          <Animated.View\n            style={[\n              {\n                height: Animated.add(Animated.subtract(height, offsetY), additionalHeight),\n              },\n            ]}>\n            <EmojiStaticKeyboard />\n          </Animated.View>\n        </>\n      </ModalWithBackdrop>\n    </KeyboardProvider>\n  )\n}\n"]}