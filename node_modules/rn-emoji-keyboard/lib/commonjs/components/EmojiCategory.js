"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EmojiCategory = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _SingleEmoji = require("./SingleEmoji");

var _KeyboardContext = require("../contexts/KeyboardContext");

var _useKeyboardStore = require("../store/useKeyboardStore");

var _utils = require("../utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const emptyEmoji = {
  emoji: '',
  name: 'blank emoji',
  v: '0'
};

const EmojiCategory = ({
  item: {
    title,
    data
  }
}) => {
  const {
    onEmojiSelected,
    emojiSize,
    numberOfColumns,
    width,
    hideHeader,
    headerStyles,
    translation,
    categoryPosition
  } = React.useContext(_KeyboardContext.KeyboardContext);
  const {
    setKeyboardState
  } = (0, _useKeyboardStore.useKeyboardStore)();
  const [empty, setEmpty] = React.useState([]);
  React.useEffect(() => {
    if (data.length % numberOfColumns) {
      const fillWithEmpty = new Array(numberOfColumns - data.length % numberOfColumns).fill(emptyEmoji);
      setEmpty(fillWithEmpty);
    }
  }, [numberOfColumns, data]);

  const getItemLayout = (_, index) => ({
    length: emojiSize ? emojiSize : 0,
    offset: emojiSize * Math.ceil(index / numberOfColumns),
    index
  });

  const handleEmojiPress = React.useCallback(emoji => {
    if (emoji.name === 'blank emoji') return;
    const parsedEmoji = (0, _utils.parseEmoji)(emoji);
    onEmojiSelected(parsedEmoji);
    setKeyboardState({
      type: 'RECENT_EMOJI_ADD',
      payload: emoji
    });
  }, [onEmojiSelected, setKeyboardState]);
  const renderItem = React.useCallback(props => /*#__PURE__*/React.createElement(_SingleEmoji.SingleEmoji, _extends({}, props, {
    onPress: () => handleEmojiPress(props.item),
    emojiSize: emojiSize
  })), [emojiSize, handleEmojiPress]);
  return /*#__PURE__*/React.createElement(_reactNative.View, {
    style: [styles.container, {
      width: width
    }]
  }, !hideHeader && /*#__PURE__*/React.createElement(_reactNative.Text, {
    style: [styles.sectionTitle, headerStyles]
  }, translation[title]), /*#__PURE__*/React.createElement(_reactNative.FlatList, {
    data: [...data, ...empty],
    keyExtractor: emoji => emoji.name,
    numColumns: numberOfColumns,
    renderItem: renderItem,
    removeClippedSubviews: true,
    getItemLayout: getItemLayout,
    ListFooterComponent: () => /*#__PURE__*/React.createElement(_reactNative.View, {
      style: categoryPosition === 'floating' ? styles.footerFloating : styles.footer
    }),
    windowSize: 20,
    keyboardShouldPersistTaps: "handled"
  }));
};

exports.EmojiCategory = EmojiCategory;

const styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    paddingHorizontal: 10,
    marginTop: 6
  },
  sectionTitle: {
    opacity: 0.6,
    marginTop: 12,
    marginBottom: 6,
    marginLeft: 12
  },
  footer: {
    height: 8
  },
  footerFloating: {
    height: 70
  }
});
//# sourceMappingURL=EmojiCategory.js.map