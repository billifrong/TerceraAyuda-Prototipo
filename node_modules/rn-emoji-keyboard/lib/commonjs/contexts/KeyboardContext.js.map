{"version":3,"sources":["KeyboardContext.tsx"],"names":["KeyboardContext","React","createContext","defaultKeyboardContext","defaultKeyboardValues"],"mappings":";;;;;;;AAAA;;AAEA;;;;;;AAyDO,MAAMA,eAAe,gBAAGC,KAAK,CAACC,aAAN,CAA6D,EAC1F,GAAGC,wCADuF;AAE1F,KAAGC;AAFuF,CAA7D,CAAxB","sourcesContent":["import * as React from 'react'\nimport type { TextStyle, ViewStyle } from 'react-native'\nimport { defaultKeyboardContext, defaultKeyboardValues } from './KeyboardProvider'\nimport type {\n  CategoryTranslation,\n  EmojiType,\n  CategoryTypes,\n  CategoryPosition,\n  EmojisByCategory,\n} from '../types'\n\nexport type OnEmojiSelected = (emoji: EmojiType) => void\n\nexport type KeyboardProps = {\n  open: boolean\n  onClose: () => void\n  onEmojiSelected: OnEmojiSelected\n  emojiSize?: number\n  containerStyles?: ViewStyle\n  knobStyles?: ViewStyle\n  headerStyles?: TextStyle\n  expandable?: boolean\n  hideHeader?: boolean\n  defaultHeight?: number | string\n  expandedHeight?: number | string\n  backdropColor?: string\n  categoryColor?: string\n  activeCategoryColor?: string\n  categoryContainerColor?: string\n  activeCategoryContainerColor?: string\n  onCategoryChangeFailed?: (info: {\n    index: number\n    highestMeasuredFrameIndex: number\n    averageItemLength: number\n  }) => void\n  translation?: CategoryTranslation\n  disabledCategories?: CategoryTypes[]\n  enableRecentlyUsed?: boolean\n  categoryPosition?: CategoryPosition\n  enableSearchBar?: boolean\n  closeSearchColor?: string\n  searchBarStyles?: ViewStyle\n  searchBarTextStyles?: TextStyle\n  searchBarPlaceholderColor?: string\n  categoryOrder?: CategoryTypes[]\n  onRequestClose?: () => void\n  categoryContainerStyles?: ViewStyle\n  disableSafeArea?: boolean\n}\nexport type ContextValues = {\n  activeCategoryIndex: number\n  setActiveCategoryIndex: (index: number) => void\n  numberOfColumns: number\n  width: number\n  searchPhrase: string\n  setSearchPhrase: (phrase: string) => void\n  renderList: EmojisByCategory[]\n}\n\nexport const KeyboardContext = React.createContext<Required<KeyboardProps> & ContextValues>({\n  ...defaultKeyboardContext,\n  ...defaultKeyboardValues,\n})\n"]}