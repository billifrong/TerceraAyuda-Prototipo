{"version":3,"sources":["EmojiPicker.tsx"],"names":["React","Animated","useWindowDimensions","EmojiStaticKeyboard","Knob","defaultKeyboardContext","KeyboardProvider","ModalWithBackdrop","getHeight","useKeyboard","EmojiPicker","onEmojiSelected","onRequestClose","open","onClose","expandable","defaultHeight","props","height","screenHeight","offsetY","useRef","Value","current","additionalHeight","keyboardVisible","keyboardHeight","isExpanded","setIsExpanded","useState","useEffect","shouldExpandHeight","newAdditionalHeightValue","timing","toValue","useNativeDriver","duration","start","close","setValue","emoji","add","subtract"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { Animated, useWindowDimensions } from 'react-native'\nimport { EmojiStaticKeyboard } from './components/EmojiStaticKeyboard'\nimport { Knob } from './components/Knob'\nimport { defaultKeyboardContext, KeyboardProvider } from './contexts/KeyboardProvider'\nimport type { KeyboardProps } from './contexts/KeyboardContext'\nimport type { EmojiType } from './types'\nimport { ModalWithBackdrop } from './components/ModalWithBackdrop'\nimport { getHeight } from './utils'\nimport { useKeyboard } from './hooks/useKeyboard'\n\nexport const EmojiPicker = ({\n  onEmojiSelected,\n  onRequestClose,\n  open,\n  onClose,\n  expandable = defaultKeyboardContext.expandable,\n  defaultHeight = defaultKeyboardContext.defaultHeight,\n  ...props\n}: KeyboardProps) => {\n  const { height: screenHeight } = useWindowDimensions()\n  const offsetY = React.useRef(new Animated.Value(0)).current\n  const height = React.useRef(new Animated.Value(getHeight(defaultHeight, screenHeight))).current\n  const additionalHeight = React.useRef(new Animated.Value(0)).current\n  const { keyboardVisible, keyboardHeight } = useKeyboard()\n  const [isExpanded, setIsExpanded] = React.useState(false)\n\n  React.useEffect(() => {\n    const shouldExpandHeight = keyboardVisible && !isExpanded\n    const newAdditionalHeightValue = shouldExpandHeight ? keyboardHeight : 0\n    Animated.timing(additionalHeight, {\n      toValue: newAdditionalHeightValue,\n      useNativeDriver: false,\n      duration: 200,\n    }).start()\n  }, [additionalHeight, isExpanded, keyboardHeight, keyboardVisible])\n\n  const close = () => {\n    height.setValue(getHeight(defaultHeight, screenHeight))\n    offsetY.setValue(0)\n    onClose()\n  }\n\n  return (\n    <KeyboardProvider\n      onEmojiSelected={(emoji: EmojiType) => {\n        onEmojiSelected(emoji)\n        close()\n      }}\n      open={open}\n      onClose={close}\n      expandable={expandable}\n      defaultHeight={defaultHeight}\n      {...props}>\n      <ModalWithBackdrop isOpen={open} backdropPress={close} onRequestClose={onRequestClose}>\n        <>\n          {expandable && (\n            <Knob\n              height={height}\n              offsetY={offsetY}\n              onClose={onClose}\n              setIsExpanded={setIsExpanded}\n            />\n          )}\n          <Animated.View\n            style={[\n              {\n                height: Animated.add(Animated.subtract(height, offsetY), additionalHeight),\n              },\n            ]}>\n            <EmojiStaticKeyboard />\n          </Animated.View>\n        </>\n      </ModalWithBackdrop>\n    </KeyboardProvider>\n  )\n}\n"]}