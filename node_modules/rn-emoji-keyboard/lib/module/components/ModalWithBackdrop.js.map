{"version":3,"sources":["ModalWithBackdrop.tsx"],"names":["React","Modal","Animated","useWindowDimensions","StyleSheet","TouchableOpacity","View","KeyboardContext","useTimeout","IsSafeAreaWrapper","ModalWithBackdrop","isOpen","backdropPress","children","rest","height","screenHeight","translateY","useRef","Value","current","backdropColor","disableSafeArea","useContext","handleTimeout","useEffect","spring","toValue","useNativeDriver","start","handleClose","styles","modalContainer","backgroundColor","transform","create","flex","justifyContent","container","borderRadius","shadowColor","shadowOpacity","shadowOffset","width","shadowRadius","elevation"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport {\n  Modal,\n  Animated,\n  useWindowDimensions,\n  StyleSheet,\n  TouchableOpacity,\n  View,\n  ModalProps,\n} from 'react-native'\nimport { KeyboardContext } from '../contexts/KeyboardContext'\nimport { useTimeout } from '../hooks/useTimeout'\nimport { IsSafeAreaWrapper } from './ConditionalContainer'\n\ntype ModalWithBackdropProps = {\n  isOpen: boolean\n  backdropPress: () => void\n  children: React.ReactNode\n}\n\nexport const ModalWithBackdrop = ({\n  isOpen,\n  backdropPress,\n  children,\n  ...rest\n}: ModalWithBackdropProps & ModalProps) => {\n  const { height: screenHeight } = useWindowDimensions()\n  const translateY = React.useRef(new Animated.Value(screenHeight)).current\n  const { backdropColor, disableSafeArea } = React.useContext(KeyboardContext)\n  const handleTimeout = useTimeout()\n\n  React.useEffect(() => {\n    Animated.spring(translateY, {\n      toValue: isOpen ? 0 : screenHeight,\n      useNativeDriver: true,\n    }).start()\n  }, [isOpen, screenHeight, translateY])\n\n  const handleClose = () => {\n    Animated.spring(translateY, {\n      toValue: screenHeight,\n      useNativeDriver: true,\n    }).start()\n    handleTimeout(() => backdropPress(), 200)\n  }\n\n  return (\n    <Modal visible={isOpen} animationType=\"fade\" transparent={true} {...rest}>\n      <TouchableOpacity style={styles.modalContainer} activeOpacity={1} onPress={handleClose}>\n        <View style={[styles.modalContainer, { backgroundColor: backdropColor }]}>\n          <IsSafeAreaWrapper style={styles.modalContainer} isSafeArea={!disableSafeArea}>\n            <TouchableOpacity activeOpacity={1}>\n              <Animated.View\n                style={{\n                  transform: [{ translateY }],\n                }}>\n                {children}\n              </Animated.View>\n            </TouchableOpacity>\n          </IsSafeAreaWrapper>\n        </View>\n      </TouchableOpacity>\n    </Modal>\n  )\n}\n\nconst styles = StyleSheet.create({\n  modalContainer: { flex: 1, justifyContent: 'flex-end' },\n  container: {\n    backgroundColor: '#fff',\n    borderRadius: 16,\n    shadowColor: 'black',\n    shadowOpacity: 0.15,\n    shadowOffset: { width: 0, height: 0 },\n    shadowRadius: 5,\n    elevation: 10,\n  },\n})\n"]}