import * as React from 'react';
import { StyleSheet, View, useWindowDimensions, Animated, SafeAreaView } from 'react-native';
import { EmojiCategory } from './EmojiCategory';
import { KeyboardContext } from '../contexts/KeyboardContext';
import { Categories } from './Categories';
import { SearchBar } from './SearchBar';
import { useKeyboardStore } from '../store/useKeyboardStore';
import { ConditionalContainer } from './ConditionalContainer';
export const EmojiStaticKeyboard = () => {
  const {
    width
  } = useWindowDimensions();
  const {
    activeCategoryIndex,
    containerStyles,
    onCategoryChangeFailed,
    categoryPosition,
    enableSearchBar,
    searchPhrase,
    renderList,
    disableSafeArea
  } = React.useContext(KeyboardContext);
  const {
    keyboardState
  } = useKeyboardStore();
  const flatListRef = React.useRef(null);

  const getItemLayout = (_, index) => ({
    length: width,
    offset: width * index,
    index
  });

  const renderItem = React.useCallback(props => /*#__PURE__*/React.createElement(EmojiCategory, props), []);
  React.useEffect(() => {
    var _flatListRef$current;

    (_flatListRef$current = flatListRef.current) === null || _flatListRef$current === void 0 ? void 0 : _flatListRef$current.scrollToIndex({
      index: activeCategoryIndex
    });
  }, [activeCategoryIndex]);
  return /*#__PURE__*/React.createElement(View, {
    style: [styles.container, styles.containerShadow, categoryPosition === 'top' && disableSafeArea && styles.containerReverse, containerStyles]
  }, /*#__PURE__*/React.createElement(ConditionalContainer, {
    condition: !disableSafeArea,
    container: children => /*#__PURE__*/React.createElement(SafeAreaView, {
      style: [styles.flex, categoryPosition === 'top' && styles.containerReverse]
    }, children)
  }, /*#__PURE__*/React.createElement(React.Fragment, null, enableSearchBar && /*#__PURE__*/React.createElement(SearchBar, null), /*#__PURE__*/React.createElement(Animated.FlatList, {
    extraData: [keyboardState.recentlyUsed.length, searchPhrase],
    data: renderList,
    keyExtractor: item => item.title,
    renderItem: renderItem,
    removeClippedSubviews: true,
    ref: flatListRef,
    onScrollToIndexFailed: onCategoryChangeFailed,
    horizontal: true,
    showsHorizontalScrollIndicator: false,
    pagingEnabled: true,
    scrollEventThrottle: 16,
    getItemLayout: getItemLayout,
    scrollEnabled: false,
    initialNumToRender: 1,
    windowSize: 2,
    maxToRenderPerBatch: 1,
    keyboardShouldPersistTaps: "handled"
  }), /*#__PURE__*/React.createElement(Categories, null))));
};
const styles = StyleSheet.create({
  flex: {
    flex: 1
  },
  container: {
    flex: 1,
    borderRadius: 16,
    backgroundColor: '#fff'
  },
  containerReverse: {
    flexDirection: 'column-reverse'
  },
  containerShadow: {
    shadowColor: 'black',
    shadowOpacity: 0.15,
    shadowOffset: {
      width: 0,
      height: 0
    },
    shadowRadius: 5,
    elevation: 10
  }
});
//# sourceMappingURL=EmojiStaticKeyboard.js.map