{"version":3,"sources":["EmojiCategory.tsx"],"names":["React","StyleSheet","View","Text","FlatList","SingleEmoji","KeyboardContext","useKeyboardStore","parseEmoji","emptyEmoji","emoji","name","v","EmojiCategory","item","title","data","onEmojiSelected","emojiSize","numberOfColumns","width","hideHeader","headerStyles","translation","categoryPosition","useContext","setKeyboardState","empty","setEmpty","useState","useEffect","length","fillWithEmpty","Array","fill","getItemLayout","_","index","offset","Math","ceil","handleEmojiPress","useCallback","parsedEmoji","type","payload","renderItem","props","styles","container","sectionTitle","footerFloating","footer","create","flex","paddingHorizontal","marginTop","opacity","marginBottom","marginLeft","height"],"mappings":"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","sourcesContent":["import * as React from 'react'\n\nimport { StyleSheet, View, Text, FlatList } from 'react-native'\nimport type { EmojisByCategory, JsonEmoji } from '../types'\nimport { SingleEmoji } from './SingleEmoji'\nimport { KeyboardContext } from '../contexts/KeyboardContext'\nimport { useKeyboardStore } from '../store/useKeyboardStore'\nimport { parseEmoji } from '../utils'\n\nconst emptyEmoji: JsonEmoji = {\n  emoji: '',\n  name: 'blank emoji',\n  v: '0',\n}\n\nexport const EmojiCategory = ({ item: { title, data } }: { item: EmojisByCategory }) => {\n  const {\n    onEmojiSelected,\n    emojiSize,\n    numberOfColumns,\n    width,\n    hideHeader,\n    headerStyles,\n    translation,\n    categoryPosition,\n  } = React.useContext(KeyboardContext)\n\n  const { setKeyboardState } = useKeyboardStore()\n\n  const [empty, setEmpty] = React.useState<JsonEmoji[]>([])\n\n  React.useEffect(() => {\n    if (data.length % numberOfColumns) {\n      const fillWithEmpty = new Array(numberOfColumns - (data.length % numberOfColumns)).fill(\n        emptyEmoji\n      )\n      setEmpty(fillWithEmpty)\n    }\n  }, [numberOfColumns, data])\n\n  const getItemLayout = (_: JsonEmoji[] | null | undefined, index: number) => ({\n    length: emojiSize ? emojiSize : 0,\n    offset: emojiSize * Math.ceil(index / numberOfColumns),\n    index,\n  })\n\n  const handleEmojiPress = React.useCallback(\n    (emoji: JsonEmoji) => {\n      if (emoji.name === 'blank emoji') return\n      const parsedEmoji = parseEmoji(emoji)\n      onEmojiSelected(parsedEmoji)\n      setKeyboardState({ type: 'RECENT_EMOJI_ADD', payload: emoji })\n    },\n    [onEmojiSelected, setKeyboardState]\n  )\n\n  const renderItem = React.useCallback(\n    (props) => (\n      <SingleEmoji {...props} onPress={() => handleEmojiPress(props.item)} emojiSize={emojiSize} />\n    ),\n    [emojiSize, handleEmojiPress]\n  )\n\n  return (\n    <View style={[styles.container, { width: width }]}>\n      {!hideHeader && <Text style={[styles.sectionTitle, headerStyles]}>{translation[title]}</Text>}\n      <FlatList\n        data={[...data, ...empty]}\n        keyExtractor={(emoji) => emoji.name}\n        numColumns={numberOfColumns}\n        renderItem={renderItem}\n        removeClippedSubviews={true}\n        getItemLayout={getItemLayout}\n        ListFooterComponent={() => (\n          <View style={categoryPosition === 'floating' ? styles.footerFloating : styles.footer} />\n        )}\n        windowSize={20}\n        keyboardShouldPersistTaps=\"handled\"\n      />\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingHorizontal: 10,\n    marginTop: 6,\n  },\n  sectionTitle: {\n    opacity: 0.6,\n    marginTop: 12,\n    marginBottom: 6,\n    marginLeft: 12,\n  },\n  footer: { height: 8 },\n  footerFloating: { height: 70 },\n})\n"]}