import * as React from 'react';
import { useWindowDimensions } from 'react-native';
import { KeyboardContext } from './KeyboardContext';
import en from '../translation/en';
import emojisByGroup from '../assets/emojis.json';
import { useKeyboardStore } from '../store/useKeyboardStore';
import { CATEGORIES } from '../types';
export const defaultKeyboardContext = {
  open: false,
  onClose: () => {},
  onEmojiSelected: _emoji => {},
  emojiSize: 28,
  containerStyles: {},
  knobStyles: {},
  headerStyles: {},
  expandable: true,
  hideHeader: false,
  defaultHeight: '40%',
  expandedHeight: '80%',
  backdropColor: '#00000055',
  categoryColor: '#000000',
  activeCategoryColor: '#005b96',
  categoryContainerColor: '#e3dbcd',
  activeCategoryContainerColor: '#ffffff',
  onCategoryChangeFailed: info => {
    console.warn(info);
  },
  translation: en,
  disabledCategories: [],
  enableRecentlyUsed: false,
  categoryPosition: 'floating',
  enableSearchBar: false,
  closeSearchColor: '#00000055',
  searchBarStyles: {},
  searchBarTextStyles: {},
  searchBarPlaceholderColor: '#00000055',
  categoryOrder: [...CATEGORIES],
  onRequestClose: () => {},
  categoryContainerStyles: {},
  disableSafeArea: false
};
export const defaultKeyboardValues = {
  activeCategoryIndex: 0,
  setActiveCategoryIndex: () => {},
  numberOfColumns: 5,
  width: 0,
  searchPhrase: '',
  setSearchPhrase: _phrase => {},
  renderList: []
};
export const KeyboardProvider = /*#__PURE__*/React.memo(props => {
  const {
    width
  } = useWindowDimensions();
  const [activeCategoryIndex, setActiveCategoryIndex] = React.useState(0);
  const [searchPhrase, setSearchPhrase] = React.useState('');
  const {
    keyboardState
  } = useKeyboardStore();
  const numberOfColumns = React.useRef(Math.floor(width / ((props.emojiSize ? props.emojiSize : defaultKeyboardContext.emojiSize) * 2)));
  React.useEffect(() => {
    if (props.open) setActiveCategoryIndex(0);
    setSearchPhrase('');
  }, [props.open]);
  const renderList = React.useMemo(() => {
    let data = emojisByGroup.filter(category => {
      const title = category.title;
      if (props.disabledCategories) return !props.disabledCategories.includes(title);
      return true;
    });

    if (keyboardState.recentlyUsed.length && props.enableRecentlyUsed) {
      data.push({
        title: 'recently_used',
        data: keyboardState.recentlyUsed
      });
    }

    if (props.enableSearchBar) {
      data.push({
        title: 'search',
        data: emojisByGroup.map(group => group.data).flat().filter(emoji => {
          if (searchPhrase.length < 2) return false;
          return emoji.name.toLowerCase().includes(searchPhrase.toLowerCase()) || emoji.emoji.toLowerCase().includes(searchPhrase);
        })
      });
    }

    if (props.categoryOrder) {
      const orderedData = props.categoryOrder.flatMap(name => data.filter(el => el.title === name));
      const restData = data.filter(el => {
        var _props$categoryOrder;

        return !(props !== null && props !== void 0 && (_props$categoryOrder = props.categoryOrder) !== null && _props$categoryOrder !== void 0 && _props$categoryOrder.includes(el.title));
      });
      data = [...orderedData, ...restData];
    }

    return data;
  }, [keyboardState.recentlyUsed, props.enableRecentlyUsed, props.enableSearchBar, props.categoryOrder, props.disabledCategories, searchPhrase]);
  const value = { ...defaultKeyboardContext,
    ...defaultKeyboardValues,
    ...props,
    activeCategoryIndex,
    setActiveCategoryIndex,
    numberOfColumns: numberOfColumns.current,
    width,
    searchPhrase,
    setSearchPhrase,
    renderList
  };
  return /*#__PURE__*/React.createElement(KeyboardContext.Provider, {
    value: value
  }, props.children);
});
KeyboardProvider.displayName = 'KeyboardProvider';
//# sourceMappingURL=KeyboardProvider.js.map