{"version":3,"sources":["KeyboardProvider.tsx"],"names":["React","useWindowDimensions","KeyboardContext","en","emojisByGroup","useKeyboardStore","CATEGORIES","defaultKeyboardContext","open","onClose","onEmojiSelected","_emoji","emojiSize","containerStyles","knobStyles","headerStyles","expandable","hideHeader","defaultHeight","expandedHeight","backdropColor","categoryColor","activeCategoryColor","categoryContainerColor","activeCategoryContainerColor","onCategoryChangeFailed","info","console","warn","translation","disabledCategories","enableRecentlyUsed","categoryPosition","enableSearchBar","closeSearchColor","searchBarStyles","searchBarTextStyles","searchBarPlaceholderColor","categoryOrder","onRequestClose","categoryContainerStyles","disableSafeArea","defaultKeyboardValues","activeCategoryIndex","setActiveCategoryIndex","numberOfColumns","width","searchPhrase","setSearchPhrase","_phrase","renderList","KeyboardProvider","memo","props","useState","keyboardState","useRef","Math","floor","useEffect","useMemo","data","filter","category","title","includes","recentlyUsed","length","push","map","group","flat","emoji","name","toLowerCase","orderedData","flatMap","el","restData","value","current","children","displayName"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { useWindowDimensions } from 'react-native'\nimport { KeyboardProps, ContextValues, KeyboardContext, OnEmojiSelected } from './KeyboardContext'\nimport en from '../translation/en'\nimport emojisByGroup from '../assets/emojis.json'\nimport { useKeyboardStore } from '../store/useKeyboardStore'\nimport type { EmojiType, CategoryTypes, EmojisByCategory } from '../types'\nimport { CATEGORIES } from '../types'\n\ntype ProviderProps = Partial<KeyboardProps> & {\n  children: React.ReactNode\n  onEmojiSelected: OnEmojiSelected\n}\n\nexport const defaultKeyboardContext: Required<KeyboardProps> = {\n  open: false,\n  onClose: () => {},\n  onEmojiSelected: (_emoji: EmojiType) => {},\n  emojiSize: 28,\n  containerStyles: {},\n  knobStyles: {},\n  headerStyles: {},\n  expandable: true,\n  hideHeader: false,\n  defaultHeight: '40%',\n  expandedHeight: '80%',\n  backdropColor: '#00000055',\n  categoryColor: '#000000',\n  activeCategoryColor: '#005b96',\n  categoryContainerColor: '#e3dbcd',\n  activeCategoryContainerColor: '#ffffff',\n  onCategoryChangeFailed: (info) => {\n    console.warn(info)\n  },\n  translation: en,\n  disabledCategories: [],\n  enableRecentlyUsed: false,\n  categoryPosition: 'floating',\n  enableSearchBar: false,\n  closeSearchColor: '#00000055',\n  searchBarStyles: {},\n  searchBarTextStyles: {},\n  searchBarPlaceholderColor: '#00000055',\n  categoryOrder: [...CATEGORIES],\n  onRequestClose: () => {},\n  categoryContainerStyles: {},\n  disableSafeArea: false,\n}\n\nexport const defaultKeyboardValues: ContextValues = {\n  activeCategoryIndex: 0,\n  setActiveCategoryIndex: () => {},\n  numberOfColumns: 5,\n  width: 0,\n  searchPhrase: '',\n  setSearchPhrase: (_phrase: string) => {},\n  renderList: [],\n}\n\nexport const KeyboardProvider: React.FC<ProviderProps> = React.memo((props) => {\n  const { width } = useWindowDimensions()\n  const [activeCategoryIndex, setActiveCategoryIndex] = React.useState(0)\n  const [searchPhrase, setSearchPhrase] = React.useState('')\n  const { keyboardState } = useKeyboardStore()\n\n  const numberOfColumns = React.useRef<number>(\n    Math.floor(width / ((props.emojiSize ? props.emojiSize : defaultKeyboardContext.emojiSize) * 2))\n  )\n  React.useEffect(() => {\n    if (props.open) setActiveCategoryIndex(0)\n    setSearchPhrase('')\n  }, [props.open])\n\n  const renderList = React.useMemo(() => {\n    let data = emojisByGroup.filter((category) => {\n      const title = category.title as CategoryTypes\n      if (props.disabledCategories) return !props.disabledCategories.includes(title)\n      return true\n    })\n    if (keyboardState.recentlyUsed.length && props.enableRecentlyUsed) {\n      data.push({\n        title: 'recently_used' as CategoryTypes,\n        data: keyboardState.recentlyUsed,\n      })\n    }\n    if (props.enableSearchBar) {\n      data.push({\n        title: 'search' as CategoryTypes,\n        data: emojisByGroup\n          .map((group) => group.data)\n          .flat()\n          .filter((emoji) => {\n            if (searchPhrase.length < 2) return false\n            return (\n              emoji.name.toLowerCase().includes(searchPhrase.toLowerCase()) ||\n              emoji.emoji.toLowerCase().includes(searchPhrase)\n            )\n          }),\n      })\n    }\n    if (props.categoryOrder) {\n      const orderedData = props.categoryOrder.flatMap((name) =>\n        data.filter((el) => el.title === name)\n      )\n      const restData = data.filter(\n        (el) => !props?.categoryOrder?.includes(el.title as CategoryTypes)\n      )\n      data = [...orderedData, ...restData]\n    }\n    return data as EmojisByCategory[]\n  }, [\n    keyboardState.recentlyUsed,\n    props.enableRecentlyUsed,\n    props.enableSearchBar,\n    props.categoryOrder,\n    props.disabledCategories,\n    searchPhrase,\n  ])\n\n  const value: Required<KeyboardProps> & ContextValues = {\n    ...defaultKeyboardContext,\n    ...defaultKeyboardValues,\n    ...props,\n    activeCategoryIndex,\n    setActiveCategoryIndex,\n    numberOfColumns: numberOfColumns.current,\n    width,\n    searchPhrase,\n    setSearchPhrase,\n    renderList,\n  }\n  return <KeyboardContext.Provider value={value}>{props.children}</KeyboardContext.Provider>\n})\n\nKeyboardProvider.displayName = 'KeyboardProvider'\n"]}